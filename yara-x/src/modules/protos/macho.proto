syntax = "proto2";

import "yara.proto";

option (yara.module_options) = {
  name : "macho"
  root_message: "Macho"
  rust_module: "macho"
};

message Section {
  optional string segname = 1;
  optional string sectname = 2;
  optional uint64 addr = 3;
  optional uint64 size = 4;
  optional uint32 offset = 5;
  optional uint32 align = 6;
  optional uint32 reloff = 7;
  optional uint32 nreloc = 8;
  optional uint32 flags = 9;
  optional uint32 reserved1 = 10;
  optional uint32 reserved2 = 11;
  optional uint32 reserved3 = 12;
}

message Segment {
  optional uint32 cmd = 1;
  optional uint32 cmdsize = 2;
  optional string segname = 3;
  optional uint64 vmaddr = 4;
  optional uint64 vmsize = 5;
  optional uint64 fileoff = 6;
  optional uint64 filesize = 7;
  optional uint32 maxprot = 8;
  optional uint32 initprot = 9;
  optional uint32 nsects = 10;
  optional uint32 flags = 11;
  repeated Section sections = 12;
}

message FatArch {
  optional uint32 cputype = 1;
  optional uint32 cpusubtype = 2;
  optional uint64 offset = 3;
  optional uint64 size = 4;
  optional uint32 align = 5;
  optional uint32 reserved = 6;
}

message File {
  optional uint32 magic = 1;
  optional uint32 cputype = 2;
  optional uint32 cpusubtype = 3;
  optional uint32 filetype = 4;
  optional uint32 ncmds = 5;
  optional uint32 sizeofcmds = 6;
  optional uint32 flags = 7;
  optional uint32 reserved = 8;
  optional uint64 number_of_segments = 9;
  repeated Segment segments = 10;
  optional uint64 entry_point = 11;
  optional uint64 stack_size = 12;
}

message Macho {
  // Set Mach-O header and basic fields
  optional uint32 magic = 1;
  optional uint32 cputype = 2;
  optional uint32 cpusubtype = 3;
  optional uint32 filetype = 4;
  optional uint32 ncmds = 5;
  optional uint32 sizeofcmds = 6;
  optional uint32 flags = 7;
  optional uint32 reserved = 8;
  optional uint64 number_of_segments = 9;
  repeated Segment segments = 10;
  optional uint64 entry_point = 11;
  optional uint64 stack_size = 12;

  // Add fields for Mach-O fat binary header
  optional uint32 fat_magic = 13;
  optional uint32 nfat_arch = 14;
  repeated FatArch fat_arch = 15;

  // Nested Mach-O files
  repeated File file = 16;

  // Set Mach-O definitions
  required uint32 MH_MAGIC = 17;
  required uint32 MH_CIGAM = 18;
  required uint32 MH_MAGIC_64 = 19;
  required uint32 MH_CIGAM_64 = 20;

  // Set FAT Mach-O definitions
  required uint32 FAT_MAGIC = 21;
  required uint32 FAT_CIGAM = 22;
  required uint32 FAT_MAGIC_64 = 23;
  required uint32 FAT_CIGAM_64 = 24;

  // Set 64bit masks
  required uint32 CPU_ARCH_ABI64 = 25;
  required uint32 CPU_SUBTYPE_LIB64 = 26;

  // Set CPU types
  required uint32 CPU_TYPE_MC680X0 = 27;
  required uint32 CPU_TYPE_X86 = 28;
  required uint32 CPU_TYPE_I386 = 29;
  required uint32 CPU_TYPE_X86_64 = 30;
  required uint32 CPU_TYPE_MIPS = 31;
  required uint32 CPU_TYPE_MC98000 = 32;
  required uint32 CPU_TYPE_ARM = 33;
  required uint32 CPU_TYPE_ARM64 = 34;
  required uint32 CPU_TYPE_MC88000 = 35;
  required uint32 CPU_TYPE_SPARC = 36;
  required uint32 CPU_TYPE_POWERPC = 37;
  required uint32 CPU_TYPE_POWERPC64 = 38;

  // Set CPU subtypes
  required uint32 CPU_SUBTYPE_INTEL_MODEL_ALL = 39;
  required uint32 CPU_SUBTYPE_386 = 40;
  required uint32 CPU_SUBTYPE_I386_ALL = 41;
  required uint32 CPU_SUBTYPE_X86_64_ALL = 42;
  required uint32 CPU_SUBTYPE_486 = 43;
  required uint32 CPU_SUBTYPE_486SX = 44;
  required uint32 CPU_SUBTYPE_586 = 45;
  required uint32 CPU_SUBTYPE_PENT = 46;
  required uint32 CPU_SUBTYPE_PENTPRO = 47;
  required uint32 CPU_SUBTYPE_PENTII_M3 = 48;
  required uint32 CPU_SUBTYPE_PENTII_M5 = 49;
  required uint32 CPU_SUBTYPE_CELERON = 50;
  required uint32 CPU_SUBTYPE_CELERON_MOBILE = 51;
  required uint32 CPU_SUBTYPE_PENTIUM_3 = 52;
  required uint32 CPU_SUBTYPE_PENTIUM_3_M = 53;
  required uint32 CPU_SUBTYPE_PENTIUM_3_XEON = 54;
  required uint32 CPU_SUBTYPE_PENTIUM_M = 55;
  required uint32 CPU_SUBTYPE_PENTIUM_4 = 56;
  required uint32 CPU_SUBTYPE_PENTIUM_4_M = 57;
  required uint32 CPU_SUBTYPE_ITANIUM = 58;
  required uint32 CPU_SUBTYPE_ITANIUM_2 = 59;
  required uint32 CPU_SUBTYPE_XEON = 60;
  required uint32 CPU_SUBTYPE_XEON_MP = 61;
  required uint32 CPU_SUBTYPE_ARM_ALL = 62;
  required uint32 CPU_SUBTYPE_ARM_V4T = 63;
  required uint32 CPU_SUBTYPE_ARM_V6 = 64;
  required uint32 CPU_SUBTYPE_ARM_V5 = 65;
  required uint32 CPU_SUBTYPE_ARM_V5TEJ = 66;
  required uint32 CPU_SUBTYPE_ARM_XSCALE = 67;
  required uint32 CPU_SUBTYPE_ARM_V7 = 68;
  required uint32 CPU_SUBTYPE_ARM_V7F = 69;
  required uint32 CPU_SUBTYPE_ARM_V7S = 70;
  required uint32 CPU_SUBTYPE_ARM_V7K = 71;
  required uint32 CPU_SUBTYPE_ARM_V6M = 72;
  required uint32 CPU_SUBTYPE_ARM_V7M = 73;
  required uint32 CPU_SUBTYPE_ARM_V7EM = 74;
  required uint32 CPU_SUBTYPE_ARM64_ALL = 75;
  required uint32 CPU_SUBTYPE_SPARC_ALL = 76;
  required uint32 CPU_SUBTYPE_POWERPC_ALL = 77;
  required uint32 CPU_SUBTYPE_MC980000_ALL = 78;
  required uint32 CPU_SUBTYPE_POWERPC_601 = 79;
  required uint32 CPU_SUBTYPE_MC98601 = 80;
  required uint32 CPU_SUBTYPE_POWERPC_602 = 81;
  required uint32 CPU_SUBTYPE_POWERPC_603 = 82;
  required uint32 CPU_SUBTYPE_POWERPC_603E = 83;
  required uint32 CPU_SUBTYPE_POWERPC_603EV = 84;
  required uint32 CPU_SUBTYPE_POWERPC_604 = 85;
  required uint32 CPU_SUBTYPE_POWERPC_604E = 86;
  required uint32 CPU_SUBTYPE_POWERPC_620 = 87;
  required uint32 CPU_SUBTYPE_POWERPC_750 = 88;
  required uint32 CPU_SUBTYPE_POWERPC_7400 = 89;
  required uint32 CPU_SUBTYPE_POWERPC_7450 = 90;
  required uint32 CPU_SUBTYPE_POWERPC_970 = 91;

  // Set file types
  required uint32 MH_OBJECT = 92;
  required uint32 MH_EXECUTE = 93;
  required uint32 MH_FVMLIB = 94;
  required uint32 MH_CORE = 95;
  required uint32 MH_PRELOAD = 96;
  required uint32 MH_DYLIB = 97;
  required uint32 MH_DYLINKER = 98;
  required uint32 MH_BUNDLE = 99;
  required uint32 MH_DYLIB_STUB = 100;
  required uint32 MH_DSYM = 101;
  required uint32 MH_KEXT_BUNDLE = 102;

  // Set header flags
  required uint32 MH_NOUNDEFS = 103;
  required uint32 MH_INCRLINK = 104;
  required uint32 MH_DYLDLINK = 105;
  required uint32 MH_BINDATLOAD = 106;
  required uint32 MH_PREBOUND = 107;
  required uint32 MH_SPLIT_SEGS = 108;
  required uint32 MH_LAZY_INIT = 109;
  required uint32 MH_TWOLEVEL = 110;
  required uint32 MH_FORCE_FLAT = 111;
  required uint32 MH_NOMULTIDEFS = 112;
  required uint32 MH_NOFIXPREBINDING = 113;
  required uint32 MH_PREBINDABLE = 114;
  required uint32 MH_ALLMODSBOUND = 115;
  required uint32 MH_SUBSECTIONS_VIA_SYMBOLS = 116;
  required uint32 MH_CANONICAL = 117;
  required uint32 MH_WEAK_DEFINES = 118;
  required uint32 MH_BINDS_TO_WEAK = 119;
  required uint32 MH_ALLOW_STACK_EXECUTION = 120;
  required uint32 MH_ROOT_SAFE = 121;
  required uint32 MH_SETUID_SAFE = 122;
  required uint32 MH_NO_REEXPORTED_DYLIBS = 123;
  required uint32 MH_PIE = 124;
  required uint32 MH_DEAD_STRIPPABLE_DYLIB = 125;
  required uint32 MH_HAS_TLV_DESCRIPTORS = 126;
  required uint32 MH_NO_HEAP_EXECUTION = 127;
  required uint32 MH_APP_EXTENSION_SAFE = 128;

  // Set segment flags masks
  required uint32 SG_HIGHVM = 129;
  required uint32 SG_FVMLIB = 130;
  required uint32 SG_NORELOC = 131;
  required uint32 SG_PROTECTED_VERSION_1 = 132;

  // Set sections flags masks
  required uint32 SECTION_TYPE = 133;
  required uint32 SECTION_ATTRIBUTES = 134;

  // Set section types
  required uint32 S_REGULAR = 135;
  required uint32 S_ZEROFILL = 136;
  required uint32 S_CSTRING_LITERALS = 137;
  required uint32 S_4BYTE_LITERALS = 138;
  required uint32 S_8BYTE_LITERALS = 139;
  required uint32 S_NON_LAZY_SYMBOL_POINTERS = 140;
  required uint32 S_LAZY_SYMBOL_POINTERS = 141;
  required uint32 S_LITERAL_POINTERS = 142;
  required uint32 S_SYMBOL_STUBS = 143;
  required uint32 S_MOD_INIT_FUNC_POINTERS = 144;
  required uint32 S_MOD_TERM_FUNC_POINTERS = 145;
  required uint32 S_COALESCED = 146;
  required uint32 S_GB_ZEROFILL = 147;
  required uint32 S_INTERPOSING = 148;
  required uint32 S_16BYTE_LITERALS = 149;
  required uint32 S_DTRACE_DOF = 150;
  required uint32 S_LAZY_DYLIB_SYMBOL_POINTERS = 151;
  required uint32 S_THREAD_LOCAL_REGULAR = 152;
  required uint32 S_THREAD_LOCAL_ZEROFILL = 153;
  required uint32 S_THREAD_LOCAL_VARIABLES = 154;
  required uint32 S_THREAD_LOCAL_VARIABLE_POINTERS = 155;
  required uint32 S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 156;

  // Set section attributes
  required uint32 S_ATTR_PURE_INSTRUCTIONS = 157;
  required uint32 S_ATTR_NO_TOC = 158;
  required uint32 S_ATTR_STRIP_STATIC_SYMS = 159;
  required uint32 S_ATTR_NO_DEAD_STRIP = 160;
  required uint32 S_ATTR_LIVE_SUPPORT = 161;
  required uint32 S_ATTR_SELF_MODIFYING_CODE = 162;
  required uint32 S_ATTR_DEBUG = 163;
  required uint32 S_ATTR_SOME_INSTRUCTIONS = 164;
  required uint32 S_ATTR_EXT_RELOC = 165;
  required uint32 S_ATTR_LOC_RELOC = 166;
}
